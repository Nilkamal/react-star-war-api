{"version":3,"sources":["People.js","PeopleList.js","SearchInput.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["People","_ref","name","height","eye_color","gender","react_default","a","createElement","className","concat","PeopleList","arrayList","persons","map","person","i","src_People","key","SearchInput","onSearchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","setState","searchField","target","value","state","people","_this2","fetch","then","resp","json","data","console","log","results","_this3","filteredPeople","filter","toLowerCase","includes","length","src_SearchInput","src_Scroll","src_PeopleList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oMAaeA,EAXA,SAAAC,GAAuC,IAArCC,EAAqCD,EAArCC,KAAMC,EAA+BF,EAA/BE,OAAQC,EAAuBH,EAAvBG,UAAWC,EAAYJ,EAAZI,OACtC,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAS,qBAAAC,OAAuBN,EAAvB,mBACVE,EAAAC,EAAAC,cAAA,UAAKN,GACLI,EAAAC,EAAAC,cAAA,qBAAaL,GACbG,EAAAC,EAAAC,cAAA,wBAAgBJ,GAChBE,EAAAC,EAAAC,cAAA,qBAAaH,KCWVM,EAhBI,SAAAV,GAAe,IACxBW,EADwBX,EAAbY,QACSC,IAAI,SAACC,EAAQC,GACnC,OACIV,EAAAC,EAAAC,cAACS,EAAD,CAAQC,IAAKF,EAAGd,KAAMa,EAAOb,KAAMC,OAAQY,EAAOZ,OAAQC,UAAWW,EAAOX,UAAWC,OAAQU,EAAOV,WAG9G,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAGTG,ICECO,EAbK,SAAAlB,GAAsB,IAApBmB,EAAoBnB,EAApBmB,eAClB,OACId,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SACAa,KAAK,SACLC,YAAY,iBACZb,UAAU,yBACVc,SAAUH,MCCPI,EARA,SAACC,GACZ,OACInB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,KAAKiB,MAAO,CAACC,UAAU,SAASC,OAAQ,kBAAmBzB,OAAQ,UAC7EsB,EAAMI,WCgDJC,qBA7CX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAkBJd,eAAiB,SAACkB,GACdP,EAAKQ,SAAS,CACVC,YAAaF,EAAEG,OAAOC,SAnB1BX,EAAKY,MAAQ,CACTC,OAAQ,GACRJ,YAAa,IAJPT,mFAQM,IAAAc,EAAAX,KACnBY,MAAM,gCACUC,KAAK,SAAAC,GAAI,OAAEA,EAAKC,SAChBF,KAAK,SAAAG,GACFC,QAAQC,IAAIF,GACZL,EAAKN,SAAS,CACVK,OAAQM,EAAKG,6CAU5B,IAAAC,EAAApB,KACCqB,EAAiBrB,KAAKS,MAAMC,OAAOY,OAAO,SAACzC,GAC7C,OAAOA,EAAOb,KAAKuD,cAAcC,SAASJ,EAAKX,MAAMH,YAAYiB,iBAGrE,OAAgC,IAA7BvB,KAAKS,MAAMC,OAAOe,OACTrD,EAAAC,EAAAC,cAAA,qBAGPF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACXH,EAAAC,EAAAC,cAAA,iCACDF,EAAAC,EAAAC,cAACoD,EAAD,CAAaxC,eAAgBc,KAAKd,iBAClCd,EAAAC,EAAAC,cAACqD,EAAD,KACAvD,EAAAC,EAAAC,cAACsD,EAAD,CAAYjD,QAAS0C,aAvCnBQ,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC","file":"static/js/main.e41094e5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst People = ({name, height, eye_color, gender}) => {\r\n    return (\r\n        <div className={`tc dib ma2 pa2 bg-${eye_color} grow shadow-5`} >\r\n            <h2>{name}</h2>\r\n            <p>Height - {height}</p>\r\n            <p>Eye Color - {eye_color}</p>\r\n            <p>Gender - {gender}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default People;","import React from 'react';\r\nimport People from './People';\r\n\r\nconst PeopleList = ({persons}) => {\r\n    const arrayList = persons.map((person, i) => {\r\n        return (\r\n            <People key={i} name={person.name} height={person.height} eye_color={person.eye_color} gender={person.gender} />\r\n        );\r\n    })\r\n    return (\r\n        <div className='tc pa3 mt10 '>\r\n            \r\n          {\r\n              arrayList\r\n          }  \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PeopleList;","import React from 'react';\r\n\r\nconst SearchInput = ({onSearchChange}) => {\r\n    return (\r\n        <div>\r\n            <input \r\n            type='search' \r\n            placeholder='Search Him/Her' \r\n            className='pa2 w-30 bg-light-blue' \r\n            onChange={onSearchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchInput;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div className='tc' style={{overflowY:\"scroll\",border: '3px solid black', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport PeopleList from './PeopleList';\r\nimport SearchInput from './SearchInput';\r\nimport Scroll from './Scroll';\r\nimport 'tachyons';\r\n\r\nclass App extends Component {\r\n    \r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            people: [],\r\n            searchField: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n     fetch('https://swapi.co/api/people/')\r\n                    .then(resp=>resp.json())\r\n                    .then(data=>{\r\n                        console.log(data);\r\n                        this.setState({\r\n                            people: data.results\r\n                        });                   \r\n                    });\r\n    }\r\n\r\n    onSearchChange = (e) => {\r\n        this.setState({\r\n            searchField: e.target.value\r\n        })\r\n    }\r\n    render() {\r\n        const filteredPeople = this.state.people.filter((person) => {\r\n            return person.name.toLowerCase().includes(this.state.searchField.toLowerCase());\r\n        })\r\n\r\n        if(this.state.people.length === 0) {\r\n            return (<h1>LOADING</h1>);\r\n        } else {\r\n        return (\r\n             <div className='tc'>\r\n                 <h1>Star War People API</h1>\r\n                <SearchInput onSearchChange={this.onSearchChange} />\r\n                <Scroll>\r\n                <PeopleList persons={filteredPeople}/>\r\n                </Scroll>\r\n            </div>\r\n        );\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}